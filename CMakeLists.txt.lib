cmake_minimum_required(VERSION 3.18.2)
project(Gradido_Node C CXX)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "bin" )

SET ( CMAKE_CXX_FLAGS "-std=c++17" )
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(WIN32)
	set(CMAKE_CXX_FLAGS         "/MP /EHsc")
	set(CMAKE_CXX_FLAGS_DEBUG   "-O0 -g3")
	set(CMAKE_CXX_FLAGS_RELEASE "-O3")
else()
	set(INSTALL_BINDIR "bin")
	set(INSTALL_PLUGINDIR "bin")
endif()

include_directories(
	"dependencies" 
	#"dependencies/protobuf/src"
	"build/proto"
	"dependencies/rapidjson/include"
	"dependencies/leveldb/include"
	#"dependencies/googletest/googletest/include"
	#"dependencies/leveldb/third_party/googletest/googlemock/include"
)

include_directories(
	"dependencies" 
	"build"
	"build/proto"
	"src/cpp"
)
option(LEVELDB_BUILD_TESTS "Build LevelDB's unit tests" OFF)
add_subdirectory("dependencies/leveldb")

############################## config and add grpc ###################################
find_package(Protobuf REQUIRED)
include_directories(${Protobuf_INCLUDE_DIRS})

set(PROTOBUF_LIBS protobuf::libprotobuf protobuf::libprotobuf-lite protobuf::libprotoc)

############################## parse proto files ###################################

FILE(TO_NATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/src/proto GRADIDO_PROTO_MODEL_PATH)
FILE(TO_NATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/build/proto PROTOBINDING_PATH)
file(MAKE_DIRECTORY ${PROTOBINDING_PATH})
file(MAKE_DIRECTORY ${PROTOBINDING_PATH}/gradido)

FILE(GLOB DATAMODEL_GRADIDO_PROTOS "${GRADIDO_PROTO_MODEL_PATH}/gradido/*.proto")

FOREACH(proto ${DATAMODEL_GRADIDO_PROTOS})
   FILE(TO_NATIVE_PATH ${proto} proto_native)
   get_filename_component(proto_parsed ${proto} NAME_WLE)
   FILE(TO_NATIVE_PATH ${PROTOBINDING_PATH}/gradido/${proto_parsed}.pb.h proto_parsed_native)
   
   IF(${proto_native} IS_NEWER_THAN ${proto_parsed_native})
		EXECUTE_PROCESS(
			COMMAND 
			${PROTOBUF_PROTOC_EXECUTABLE} 
			--proto_path=${GRADIDO_PROTO_MODEL_PATH} 
			--cpp_out=${PROTOBINDING_PATH} 
			${proto_native}
			RESULT_VARIABLE rv
		)
		# Optional, but that can show the user if something have gone wrong with the proto generation 
		IF(${rv})
			MESSAGE("Generation of data model returned ${rv} for proto ${proto_native}")
		ELSE()
			MESSAGE("Parsed: src/proto/gradido/${proto_parsed}.proto")
		ENDIF()
   ENDIF()

ENDFOREACH(proto)


FILE(GLOB CONTROLLER "src/cpp/controller/*.cpp" "src/cpp/controller/*.h")
FILE(GLOB IOTA "src/cpp/iota/*.cpp" "src/cpp/iota/*.h")
FILE(GLOB JSONRPCInterface "src/cpp/JSONRPCInterface/*.h" "src/cpp/JSONRPCInterface/*.cpp")
FILE(GLOB LIB_SRC "src/cpp/lib/*.h" "src/cpp/lib/*.cpp" "src/cpp/lib/*.c")
FILE(GLOB MODEL "src/cpp/model/*.h" "src/cpp/model/*.cpp")
FILE(GLOB MODEL_FILES "src/cpp/model/files/*.h" "src/cpp/model/files/*.cpp")
FILE(GLOB MODEL_TRANSACTIONS "src/cpp/model/transactions/*.h" "src/cpp/model/transactions/*.cpp")
FILE(GLOB PROTO_GRADIDO "build/proto/gradido/*.cc" "build/proto/gradido/*.h")
FILE(GLOB SINGLETON_MANAGER "src/cpp/SingletonManager/*.h" "src/cpp/SingletonManager/*.cpp")
FILE(GLOB TASK "src/cpp/task/*.cpp" "src/cpp/task/*.h")
FILE(GLOB MAIN "src/cpp/*.cpp" "src/cpp/*.c"  "src/cpp/*.h")

# used only for test project 
FILE(GLOB TEST "src/cpp/test/*.cpp" "src/cpp/test/*.h")
FILE(GLOB TEST_MODEL "src/cpp/test/model/*.cpp" "src/cpp/test/model/*.h")
FILE(GLOB TEST_MODEL_FILES "src/cpp/test/model/files/*.cpp" "src/cpp/test/model/files/*.h")
FILE(GLOB TEST_CONTROLLER "src/cpp/test/controller/*.cpp" "src/cpp/test/controller/*.h")

SET(LOCAL_SRCS 
	${CONTROLLER} ${IOTA}
	${JSONRPCInterface}
	${LIB_SRC}
	${MODEL} ${MODEL_FILES} ${MODEL_TRANSACTIONS}
	${PROTO_GRADIDO}
	${SINGLETON_MANAGER}
	${TASK} 
	${MAIN}
)

aux_source_directory("src/cpp" LOCAL_SRCS)

add_executable(Gradido_Node ${LOCAL_SRCS})

############################## config and add poco ###################################
set(BUILD_LIB_PATH "(/usr/local/lib")

IF(CMAKE_BUILD_TYPE MATCHES Debug)    
	find_library(POCO_FOUNDATION_LIB PocoFoundationd PATHS ${BUILD_LIB_PATH} REQUIRED)
	find_library(POCO_UTIL_LIB PocoUtild PATHS ${BUILD_LIB_PATH} REQUIRED)
	find_library(POCO_NET_SSL_LIB PocoNetSSLd PATHS ${BUILD_LIB_PATH} REQUIRED)
#	find_library(POCO_DATA_LIB PocoDatad PATHS ${BUILD_LIB_PATH} REQUIRED)
#	find_library(POCO_JSON_LIB PocoJSONd PATHS ${BUILD_LIB_PATH} REQUIRED)
	find_library(POCO_NET_LIB PocoNetd PATHS ${BUILD_LIB_PATH} REQUIRED)
	message("use Poco Debug libs")
ELSE()
	find_library(POCO_FOUNDATION_LIB PocoFoundation PATHS ${BUILD_LIB_PATH} REQUIRED)
	find_library(POCO_UTIL_LIB PocoUtil PATHS ${BUILD_LIB_PATH} REQUIRED)
	find_library(POCO_NET_SSL_LIB PocoNetSSL PATHS ${BUILD_LIB_PATH} REQUIRED)
#	find_library(POCO_DATA_LIB PocoData PATHS ${BUILD_LIB_PATH} REQUIRED)
#	find_library(POCO_JSON_LIB PocoJSON PATHS ${BUILD_LIB_PATH} REQUIRED)
	find_library(POCO_NET_LIB PocoNet PATHS ${BUILD_LIB_PATH} REQUIRED)
	message("use Poco Release libs")
ENDIF()

set(POCO_LIBS ${POCO_FOUNDATION_LIB} ${POCO_UTIL_LIB} ${POCO_NET_SSL_LIB} ${POCO_NET_LIB})
# ${POCO_DATA_LIB} ${POCO_JSON_LIB} 


############################## build login server ###################################

target_link_libraries(Gradido_Node ${PROTOBUF_LIBS} ${POCO_LIBS} sodium pthread leveldb)

############################## build login server test ###################################
IF(CMAKE_BUILD_TYPE STREQUAL "Debug") 
	project(Gradido_Node_Test C CXX)

	enable_testing()

	option(COLLECT_COVERAGE_DATA "Use cov to collect coverage informations" OFF)
	set(COVERAGE_TOOL "Coverage Tool (gcovr|lcov|fastcov)" CACHE STRING "gcovr")


	if(COLLECT_COVERAGE_DATA)
		
		include(cmake/CodeCoverage.cmake)
		append_coverage_compiler_flags()
		set(EXCLUDE_FOR_HTML_COV 
			"${CMAKE_CURRENT_SOURCE_DIR}/build/proto/*" 
			"${CMAKE_CURRENT_SOURCE_DIR}/dependencies/*" 
			"${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/test/*"
			"${CMAKE_CURRENT_SOURCE_DIR}/googletest/googletest/include/gtest/internal/*"
			"${CMAKE_CURRENT_SOURCE_DIR}/googletest/googletest/src/"
		)
		if("${COVERAGE_TOOL}" STREQUAL "gcovr")
			setup_target_for_coverage_gcovr_html(
				NAME coverage
				EXECUTABLE Gradido_Node_Test
				EXCLUDE ${EXCLUDE_FOR_HTML_COV}
				GCOVR_ADDITIONAL_ARGS "--txt "
				#DEPENDENCIES lib/libmariadb.so.3
			)
		endif()

		set(EXCLUDE_FOR_COV 
			${EXCLUDE_FOR_HTML_COV}
			"/usr/include/*"
		)
		if("${COVERAGE_TOOL}" STREQUAL "lcov")
			setup_target_for_coverage_lcov(
				NAME coverage
				EXECUTABLE Gradido_Node_Test
				EXCLUDE "${EXCLUDE_FOR_COV}"
				#DEPENDENCIES lib/libmariadb.so.3
			)
		endif()
		
		if("${COVERAGE_TOOL}" STREQUAL "fastcov")
			setup_target_for_coverage_fastcov(
			NAME coverage                    # New target name
			EXECUTABLE Gradido_Node_Test -j ${PROCESSOR_COUNT} # Executable in PROJECT_BINARY_DIR
			#BASE_DIRECTORY "coverage"                        # Base directory for report
														#  (defaults to PROJECT_SOURCE_DIR)
			EXCLUDE "${EXCLUDE_FOR_COV}"                # Patterns to exclude.
			NO_DEMANGLE                                 # Don't demangle C++ symbols
														#  even if c++filt is found
			SKIP_HTML                                   # Don't create html report
		)
		endif()

	endif()
	#_TEST_BUILD

	add_subdirectory("googletest")

	add_executable(Gradido_Node_Test ${LOCAL_SRCS} ${TEST} ${TEST_MODEL} ${TEST_MODEL_FILES} ${TEST_CONTROLLER})
	target_compile_definitions(Gradido_Node_Test PUBLIC "_TEST_BUILD")
	target_link_libraries(Gradido_Node_Test ${PROTOBUF_LIBS} ${POCO_LIBS} sodium pthread gtest leveldb)

	add_test(NAME main COMMAND Gradido_Node_Test)
ENDIF()